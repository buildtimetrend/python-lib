{"name":"Buildtime trend","tagline":"Gather data, analyse and visualise trends of build processes on Continuous Integration platforms","body":"[![Buildtime trend](http://img.shields.io/badge/release-v0.1.2-blue.svg)](https://github.com/ruleant/buildtime-trend/releases/latest)\r\n[![Buildtime trend](http://img.shields.io/badge/dev-0.2--dev-blue.svg)](https://github.com/ruleant/buildtime-trend/tarball/master)\r\n\r\nExample of build stages trend\r\n-----------------------------\r\n\r\n[![Graphs generated with Keen.io API](http://ruleant.github.io/buildtime-trend/images/screenshot_buildtimetrend.png)](http://ruleant.github.io/buildtime-trend/buildtime-trend/)\r\nClick the image for recently generated trends.\r\n\r\nFeatures\r\n--------\r\n\r\n- Get timing data from each stage in a build process\r\n- Store, analyse and create trends of the build process data\r\n  - keen mode : send timing data to Keen.io and use the Keen.io API for analysis and visualisation\r\n  - native mode : store data in xml format and use matplotlib to generate a chart (limited)\r\n- Current charts and trends\r\n  - number of builds, successful and failed\r\n  - average build duration\r\n  - chart with build stage durations\r\n  - builds per branch\r\n  - different time periods can be selected\r\n\r\nHow to get it?\r\n--------------\r\n\r\nThe [latest version](https://github.com/ruleant/buildtime-trend/releases/latest) is available for download as zip and tarball on GitHub. Unzip and copy to the desired directory.\r\n\r\nIf you prefer to use git, several options are available :\r\n\r\n- development version : `git clone https://github.com/ruleant/buildtime-trend.git`\r\n- latest release : `git clone https://github.com/ruleant/buildtime-trend.git --branch release`\r\n- a specific release : `git clone https://github.com/ruleant/buildtime-trend.git --branch v0.1.2`\r\n\r\nDependencies\r\n------------\r\n\r\n- keen (client for storing build time data as events in Keen.io)\r\n- lxml (python wrapper for libxml2 and libxslt)\r\n- matplotlib v1.2.0 or higher (for drawing the `native` trend graph, can be omitted when only using Keen.io to generate charts. Stackplot requires version v1.2.0)\r\n\r\n### Dependency installation\r\n\r\n- using pip :\r\n\r\n`pip install -r requirements.txt`\r\n\r\n- if you want to store data or generate charts in `native` mode :\r\n\r\n`pip install -r requirements-native.txt`\r\n\r\n- install each dependency individually :\r\n\r\n```\r\npip install keen\r\npip install lxml\r\npip install 'matplotlib>=1.2.0'\r\n```\r\n\r\n- install as a Debian package :\r\n\r\n`apt-get install python-lxml`\r\n\r\nKeen.io client is not available as a Debian package, so look at the `pip` instructions above\r\n\r\nUsage\r\n-----\r\n\r\nFirst the timestamp recording needs to be initialised :\r\n\r\n`source /path/to/init.sh`\r\n\r\nThis script will detect the location of the build-trend script folder,\r\nadds it to the PATH and cleans logfiles of previous runs.\r\nExecuting the init script with `source` is required to export environment variables to the current shell session.\r\n\r\nBecause the script dir is added to PATH, no path needs to be added\r\nwhen logging a timestamp :\r\n\r\n`timestamp.sh eventname`\r\n\r\nThis will log the current timestamp to a file and display it on STDOUT.\r\nRepeat this step as much as needed.\r\n\r\nWhen finished, run \r\n\r\n`analyse.sh`\r\n\r\nto analyse the logfile with timestamps and print out the results.\r\nIt will calculate the duration between the timestamps and add them to\r\na file with the analysed data of previous builds.\r\nWhen Keen.io is enabled, the data will be sent to your Keen.io project for analysis.\r\nWhen run on Travis CI, it will automatically add build/job related info.\r\nParameter `-m native` will store data in xml format. It is recommended to use Keen.io to store data, see below for details.\r\n\r\nTo generate a graph from previous builds, run\r\n\r\n`generate_trend.py`\r\n\r\nIt will take the file with analysed data generated by the analyse script and turn it into a trend graph and saves this graph.\r\nParameter `--mode=native` will create a trend using Python `matplotlib`. It is recommended to use Keen.io to generate graphs, see below for details.\r\nIf Keen.io is enabled, `generate_trend.py` can be run without parameters.\r\n\r\nUse the `sync-buildtime-trend-with-gh-pages.sh` script when you run it as part of a Travis CI build. See below for details.\r\n\r\nStore build time data in xml (native mode)\r\n------------------------------------------\r\n\r\n(It is recommended to use Keen.io to store data and generate trends, see below)\r\n\r\nTo store data in xml, native mode needs to be enabled. The xml file is stored in `trends/buildtimes.xml` by default.\r\n\r\nTo analyse timestamps and store the analysed data :\r\n\r\n`analyse.sh -m native`\r\n\r\nSee wiki for [data schema of the xml file](https://github.com/ruleant/buildtime-trend/wiki/Structure#data-file-in-native-mode).\r\n\r\nTo generate a chart from the data stored in the xml file :\r\n\r\n`generate_trend.py --mode=native`\r\n\r\nThis will save a trend image in `trends/trend.png`\r\n\r\nStore build time data in Keen.io\r\n--------------------------------\r\n\r\nNext to storing your build time data in xml, it can be sent to Keen.io for storage, analysis and generating graphs.\r\n\r\nFollow these steps to enable using Keen.io :\r\n\r\n1. [Create a Keen.io account](https://keen.io/signup), if you haven't already done so.\r\n2. [Create a project](https://keen.io/add-project) in your Keen.io account.\r\n3. Look up the `project ID`, `Write Key` and `Master key` and assign them to environment variables :\r\n- `export KEEN_PROJECT_ID=<Project ID>`\r\n- `export KEEN_WRITE_KEY=<Write Key>`\r\n- `export KEEN_MASTER_KEY=<Master Key>`\r\n\r\nIf these environment variables are set, the scripts will detect this and use Keen.io to store data, do analysis and generate graphs.\r\n\r\nSee wiki for [data schema of data sent to Keen.io](https://github.com/ruleant/buildtime-trend/wiki/Structure#data-structures-in-keen-mode).\r\n\r\nVisualise the trends (powered by Keen.io)\r\n-----------------------------------------\r\n\r\nMultiple trends are available when data was stored in `keen` mode :\r\n\r\nFolder `trends` contains all files necessary to display the generated trends.\r\n- Copy folder `trends` to the desired location\r\n- Rename (or copy) `config_sample.js` to `config.js`\r\n- Edit `config.js` :\r\n  - add `keen_project_id` (see Keen.io section above)\r\n  - add `keen_read_key` (see Keen.io section above, or generate a scoped read key with `get_read_key.py project_name` (`project_name` should be the same as the project_name used to store the data, this is usually the git-repo name, fe. `ruleant/buildtime-trend`)\r\n  - add `project_name` : repo name is a good default, but it can be custom project name as well, this is only used as title on the webpage. It is not used to collect data.\r\n- Browse to `trends/index.html`, this should display the trends\r\n\r\nIf you are building a Github repo on Travis CI, and you have `gh-pages` branch, you can use the script mentioned below to automatically add the right files and create the config file.\r\n\r\n\r\nIntegrate with Travis CI\r\n------------------------\r\n\r\nYou can integrate Buildtime Trend with your build process on Travis CI :\r\ninstall and initialise the buildtime trend scripts, add timestamp labels, generate the trend\r\nand synchronise it with your gh-pages branch.\r\n\r\nAll you need is a github repo, a travis account for your repo and a gh-pages branch to publish the results.\r\n\r\nYou also need to create an encrypted GH_TOKEN to get write access to your repo (publish results on gh-pages branch) :\r\n- [create](https://github.com/settings/applications) the access token for your github repo, `repo` scope is sufficient\r\n- encrypt the environment variable using the [travis tool](http://docs.travis-ci.com/user/encryption-keys/) :\r\n`travis encrypt GH_TOKEN=github_access_token`\r\n- add the encrypted token to your .travis.yml file (see below)\r\n\r\nTo enable integration with Keen.io, `KEEN_PROJECT_ID` and `KEEN_WRITE_KEY` should be set (see above):\r\n\r\n1. Follow the steps above to create a Keen.io account and project and look up the Project ID\r\n2. Encrypt the project ID using the [travis tool](http://docs.travis-ci.com/user/encryption-keys/) :\r\n`travis encrypt KEEN_PROJECT_ID=<Project ID>` and add it to .travis.yml (see below)\r\n3. For the Write key, the master key of your Keen.io project should be used, because the Write key is too long to encrypt using the Travis encryption tool :\r\n`travis encrypt KEEN_WRITE_KEY=<Master Key>`\r\n4. The master key of your Keen.io project is used to generate a scoped read key:\r\n`travis encrypt KEEN_MASTER_KEY=<Master Key>`\r\n\r\nAnother option is to export the API master key, generate a scoped key using the Keen.io [Python SDK](https://github.com/keenlabs/KeenClient-Python#create-scoped-keys) and use those keys for write and read access.\r\n \r\nThe generated trend graph and build-data will be put in folder `buildtime-trend` on your `gh-pages` branch.\r\nThe trend is available on http://{username}.github.io/{repo_name}/buildtime-trend/index.html\r\n\r\nExample `.travis.yml` file :\r\n\r\n    language: python\r\n    env:\r\n      global:\r\n        - secure: # your secure GH_TOKEN goes here (required to share trend on gh-pages)\r\n        - secure: # your secure KEEN_PROJECT_ID goes here (required to store data on Keen.io)\r\n        - secure: # your secure KEEN_WRITE_KEY goes here (required to store data on Keen.io)\r\n        - secure: # your secure KEEN_MASTER_KEY goes here (required to generate a scoped read key to generate graphs using the Keen.io API)\r\n    before_install:\r\n      # install and initialise build-trend scripts\r\n      # uncomment one of two options below (stable or development)\r\n      # download latest stable release\r\n      - git clone --depth 1 --branch v0.1.2 https://github.com/ruleant/buildtime-trend.git $HOME/buildtime-trend\r\n      # use latest development version (clone git repo)\r\n      # - if [[ -d $HOME/buildtime-trend/.git ]]; then cd $HOME/buildtime-trend; git pull; cd ..; else git clone https://github.com/ruleant/buildtime-trend.git $HOME/buildtime-trend; fi\r\n      # initialise buildtime-trend scripts\r\n      - source $HOME/buildtime-trend/init.sh\r\n    install:\r\n      # generate timestamp with label 'install'\r\n      - timestamp.sh install\r\n      # install buildtime-trend dependencies\r\n      - CFLAGS=\"-O0\" pip install -r ${BUILD_TREND_HOME}/requirements.txt\r\n      # install dependencies\r\n    script:\r\n      # generate timestamp with label 'tests'\r\n      - timestamp.sh tests\r\n      # run your tests\r\n    after_success:\r\n      # generate timestamp with label 'after_success'\r\n      - timestamp.sh after_success\r\n      # after_success scripts\r\n      # synchronise buildtime-trend result with gh-pages\r\n      - sync-buildtime-trend-with-gh-pages.sh\r\n    after_failure:\r\n      # synchronise buildtime-trend result with gh-pages\r\n      - sync-buildtime-trend-with-gh-pages.sh\r\n\r\n`sync-buildtime-trend-with-gh-pages.sh` has to run in both `after_failure` and `after_success` to report the gathered timestamps.\r\nTo enable `native` mode, add `-m native` when calling `sync-buildtime-trend-with-gh-pages.sh`\r\n\r\nBugs and feature requests\r\n-------------------------\r\n\r\nPlease report bugs and add feature requests in the Github [issue tracker](https://github.com/ruleant/buildtime-trend/issues).\r\n\r\n\r\nCredits\r\n-------\r\n\r\nFor an overview of who contributed to create Buildtime trend, see [Credits](https://github.com/ruleant/buildtime-trend/wiki/Credits).\r\n\r\nContact\r\n-------\r\n\r\nFollow us on [Twitter](https://twitter.com/buildtime_trend), [Github](https://github.com/ruleant/buildtime-trend) and [OpenHub](https://www.openhub.net/p/buildtime-trend).\r\n","google":"UA-49318924-1","note":"Don't delete this file! It's used internally to help with page regeneration."}